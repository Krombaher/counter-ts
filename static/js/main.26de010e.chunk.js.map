{"version":3,"sources":["App.module.css","components/counter/Counter.module.css","components/main-button/MainButton.module.css","components/main-input/MainInput.module.css","components/counter/Counter.tsx","components/main-button/MainButton.tsx","components/main-input/MainInput.tsx","components/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Counter","count","maxValue","error","counterStyle","s","counter","errorCounter","className","span","MainButton","callback","name","disabled","buttonStyle","button","onClick","MainInput","props","inputClass","inputError","input","type","onChange","e","Settings","useState","defaultValue","setDefaultValue","settingsBlock","inputBlock","inputName","value","start","Number","currentTarget","max","step","setError","addSettings","App","setCount","settings","setSettings","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","app","counterBlock","controls","btn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.26de010e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__36vl3\",\"controls\":\"App_controls__6s7MG\",\"inputBlock\":\"App_inputBlock__162Bm\",\"inputName\":\"App_inputName__1yg8e\",\"settingsBlock\":\"App_settingsBlock__2CGwM\",\"counterBlock\":\"App_counterBlock__1oilg\",\"btn\":\"App_btn__-3Ug6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__MoLP4\",\"errorCounter\":\"Counter_errorCounter__1Y7De\",\"span\":\"Counter_span__OGv3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MainButton_button__YXv6v\",\"disabled\":\"MainButton_disabled__3SZf8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"MainInput_input__1_RiX\",\"inputError\":\"MainInput_inputError__1GaMo\"};","import React from \"react\";\r\nimport s from '../counter/Counter.module.css';\r\n\r\ntype CounterPropsType = {\r\n    count:number\r\n    maxValue:number\r\n    error?:string\r\n}\r\n\r\nexport const Counter:React.FC<CounterPropsType> = ({count, maxValue, error}) => {\r\n\r\n    const counterStyle = s.counter + ' ' + (count === maxValue ? s.errorCounter : '')\r\n  return (\r\n      <>\r\n          <div className={counterStyle}>{error !== '' ? <span className={s.span}>{error}</span> : count}</div>\r\n      </>\r\n  )\r\n}","import React from \"react\";\r\nimport s from './/MainButton.module.css'\r\n\r\ntype MainButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled?:boolean\r\n    className?:string | undefined\r\n}\r\n\r\nexport const MainButton: React.FC<MainButtonPropsType> = ({callback, name, className,disabled}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    const buttonStyle = s.button + ' ' + (disabled ? s.disabled : '') + (className ? ' ' + className : '')\r\n\r\n    return (\r\n        <button disabled={disabled} className={buttonStyle} onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './MainInput.module.css'\r\n\r\ntype MainInputPropsType = {\r\n    value:number | string\r\n    callback:(e:ChangeEvent<HTMLInputElement>) => void | undefined\r\n    error?:string\r\n    classname?:string | undefined\r\n}\r\n\r\nexport const MainInput = (props:MainInputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callback(e)\r\n    }\r\n\r\n    const inputClass = (props.error) ? s.inputError : s.input\r\n\r\n    return (\r\n        <input type={'number'} className={inputClass} onChange={onChangeHandler}/>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {MainInput} from \"./main-input/MainInput\";\r\nimport {MainButton} from \"./main-button/MainButton\";\r\nimport {ValueType} from \"../App\";\r\n\r\ntype PropsTypeSettings = {\r\n    defaultValue: ValueType\r\n    settings: ValueType\r\n    addSettings: (defaultValue: ValueType) => void\r\n    setError: (text: string) => void\r\n    error?: string\r\n}\r\n\r\nexport const Settings = (props: PropsTypeSettings) => {\r\n    const [defaultValue, setDefaultValue] = useState(props.defaultValue)\r\n\r\n    const onStartInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDefaultValue({...defaultValue, start: Number(e.currentTarget.value)})\r\n    }\r\n\r\n    const onMaxInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDefaultValue({...defaultValue, max: Number(e.currentTarget.value)})\r\n    }\r\n\r\n    const onStepInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setDefaultValue({...defaultValue, step: Number(e.currentTarget.value)})\r\n    }\r\n\r\n    const onSaveSettingsHandler = () => {\r\n        if (defaultValue.start >= defaultValue.max || defaultValue.step < 1 ||\r\n            defaultValue.step > (defaultValue.max - defaultValue.start)) {\r\n            props.setError('Incorrect value!')\r\n        } else {\r\n            props.addSettings(defaultValue)\r\n            props.setError('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.settingsBlock}>\r\n            <h3>Settings</h3>\r\n            <div className={s.inputBlock}>\r\n                <div className={s.inputName}>\r\n                    <label>Enter start value:</label>\r\n                    <MainInput\r\n                        error={props.error}\r\n                        value={defaultValue.start}\r\n                        callback={onStartInputHandler}\r\n                    />\r\n                </div>\r\n                <div className={s.inputName}>\r\n                    <label>Enter max value:</label>\r\n                    <MainInput\r\n                        error={props.error}\r\n                        value={defaultValue.max}\r\n                        callback={onMaxInputHandler}\r\n                    />\r\n                </div>\r\n                <div className={s.inputName}>\r\n                    <label>Enter step value:</label>\r\n                    <MainInput\r\n                        error={props.error}\r\n                        value={defaultValue.step}\r\n                        callback={onStepInputHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <MainButton\r\n                name={'SAVE'}\r\n                callback={onSaveSettingsHandler}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.module.css';\r\nimport s from './App.module.css'\r\nimport {Counter} from \"./components/counter/Counter\";\r\nimport {MainButton} from \"./components/main-button/MainButton\";\r\nimport {Settings} from \"./components/Settings\";\r\n\r\nexport type ValueType = {\r\n    max: number\r\n    start: number\r\n    step: number\r\n}\r\n\r\nfunction App() {\r\n    const defaultValue: ValueType = {\r\n        max: 5,\r\n        start: 0,\r\n        step: 1\r\n    }\r\n\r\n    const [count, setCount] = useState<number>(defaultValue.start)\r\n    const [settings, setSettings] = useState<ValueType>(defaultValue)\r\n    const [error, setError] = useState('')\r\n\r\n    useEffect( () => {\r\n        let valueAsString =  localStorage.getItem('counterValue')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setCount(newValue)\r\n        }\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        localStorage.setItem('counterValue', JSON.stringify(count))\r\n    }, [count])\r\n\r\n    const onNextCounter = () => {\r\n        if (count < settings.max && count >= settings.start) {\r\n            setCount(count + settings.step)\r\n        }\r\n    }\r\n    const onResetCounter = () => {\r\n        setCount(settings.start)\r\n    }\r\n    const addSettings = (defaultValue: ValueType) => {\r\n        setSettings(defaultValue)\r\n        setCount(defaultValue.start)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={s.app}>\r\n                <Settings\r\n                    defaultValue={defaultValue}\r\n                    error={error}\r\n                    setError={setError}\r\n                    settings={settings}\r\n                    addSettings={addSettings}\r\n                />\r\n                <div className={s.counterBlock}>\r\n                    <Counter\r\n                        error={error}\r\n                        count={count}\r\n                        maxValue={settings.max}/>\r\n                    <div className={s.controls}>\r\n                        <MainButton\r\n                            disabled={count === settings.max}\r\n                            name={'INC'}\r\n                            callback={onNextCounter}/>\r\n                        <MainButton\r\n                            className={s.btn}\r\n                            disabled={count <= settings.start}\r\n                            name={'RESET'}\r\n                            callback={onResetCounter}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
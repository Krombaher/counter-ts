{"version":3,"sources":["App.module.css","components/counter/Counter.module.css","components/button/MainButton.module.css","components/counter/Counter.tsx","components/button/MainButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Counter","count","counterStyle","s","counter","errorCounter","className","MainButton","callback","name","disabled","classname","buttonStyle","button","onClick","App","useState","setCount","app","controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,SAAW,wB,gBCApDD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,gC,gBCApED,EAAOC,QAAU,CAAC,OAAS,2BAA2B,SAAW,+B,iLCMpDC,EAAqC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAE1CC,EAAeC,IAAEC,QAAU,KAAiB,IAAVH,EAAcE,IAAEE,aAAe,IACzE,OACI,oCACI,yBAAKC,UAAWJ,GAAeD,K,gBCF5BM,EAA4C,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,KAAqBC,GAAc,EAA7BC,UAA6B,EAAdD,UAMhFE,EAAcT,IAAEU,OAAS,KAAOH,EAAWP,IAAEO,SAAW,IAE9D,OACI,4BAAQA,SAAUA,EAAUJ,UAAWM,EAAaE,QAPjC,WACnBN,MAM8EC,ICiBvEM,MA9Bf,WACI,IAIA,EAA0BC,mBAHR,GAGlB,mBAAOf,EAAP,KAAcgB,EAAd,KAYA,OACI,yBAAKX,UAAU,OACX,yBAAKA,UAAWH,IAAEe,KACf,kBAAC,EAAD,CAASjB,MAAOA,IACf,yBAAKK,UAAWH,IAAEgB,UACd,kBAAC,EAAD,CAAYT,SArBX,IAqBqBT,EAAoBQ,KAAM,MAAOD,SAfjD,WACdP,EAPS,GAOWA,GANV,GAOVgB,EAAShB,EANJ,MAoBG,kBAAC,EAAD,CAAYS,SAAUT,EAAQ,EAAGQ,KAAM,QAASD,SAVzC,WACnBS,EAAS,UCRGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69ae0878.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__36vl3\",\"controls\":\"App_controls__6s7MG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__MoLP4\",\"errorCounter\":\"Counter_errorCounter__1Y7De\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MainButton_button__2J4mk\",\"disabled\":\"MainButton_disabled__3_Oeq\"};","import React from \"react\";\r\nimport s from '../counter/Counter.module.css';\r\n\r\ntype CounterPropsType = {\r\n    count:number\r\n}\r\n\r\nexport const Counter:React.FC<CounterPropsType> = ({count}) => {\r\n\r\n    const counterStyle = s.counter + ' ' + (count === 5 ? s.errorCounter : '')\r\n  return (\r\n      <>\r\n          <div className={counterStyle}>{count}</div>\r\n      </>\r\n  )\r\n}","import React from \"react\";\r\nimport s from '../button/MainButton.module.css'\r\n\r\ntype MainButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    classname?: string\r\n    disabled?:boolean\r\n}\r\n\r\nexport const MainButton: React.FC<MainButtonPropsType> = ({callback, name, classname = '',disabled}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    const buttonStyle = s.button + ' ' + (disabled ? s.disabled : '')\r\n\r\n    return (\r\n        <button disabled={disabled} className={buttonStyle} onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.module.css';\r\nimport s from './App.module.css'\r\nimport {Counter} from \"./components/counter/Counter\";\r\nimport {MainButton} from \"./components/button/MainButton\";\r\n\r\nfunction App() {\r\n    const maxValue = 5\r\n    const starValue = 0\r\n    const step = 1\r\n\r\n    const [count, setCount] = useState<number>(starValue)\r\n\r\n    const onNextCounter = () => {\r\n        if (count < maxValue && count >= starValue) {\r\n            setCount(count + step)\r\n        }\r\n    }\r\n\r\n    const onResetCounter = () => {\r\n        setCount(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={s.app}>\r\n               <Counter count={count}/>\r\n                <div className={s.controls}>\r\n                    <MainButton disabled={count === maxValue} name={'INC'} callback={onNextCounter}/>\r\n                    <MainButton disabled={count < 1} name={'RESET'} callback={onResetCounter}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}